{
  "newReactComponent": {
    "prefix": ["rc", "reactcomponent"],
    "body": [
      "export interface I${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}Props {",
      "  $2",
      "};",
      "",
      "export default function $1(props: I$1Props) {",
      "  return $0",
      "};"
    ],
    "description": "Creates a stateless React component as a named function"
  },
  "useImportedStyleClassName": {
    "prefix": ["st"],
    "body": ["className={style.${1:name}}"],
    "description": "Expands className with style prefilled from imported style file.\n"
  },
  "useMaterialIcon": {
    "prefix": ["micon"],
    "body": ["import $1 from '@mui/icons-material/${1:MailOutline}';"],
    "description": "Expands import for material icon in a way to easily search through icons"
  },
  "figmaSendAsync": {
    "prefix": ["fsa", "sendAsync"],
    "body": [
      "await io.sendAsync({ event: \"$1\", responseEvent: \"$1Response\" })"
    ],
    "description": "Sends an async message to Figma sandbox and await response"
  },
  "useState": {
    "prefix": ["us", "useState", "hooks.useState"],
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ],
    "description": "`useState()`, Returns a stateful value, and a function to update it.\n"
  },
  "useRef": {
    "prefix": ["ure", "useRef", "hooks.useRef"],
    "body": ["const ${1:ref} = useRef(${2:initialValue})"],
    "description": "`useRef()`, returns a mutable ref object whose `.current` property is initialized to the passed argument (`initialValue`). The returned object will persist for the full lifetime of the component.\n"
  },
  "useReducer": {
    "prefix": ["ur", "useReducer", "hooks.useReducer"],
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initializerArg})"
    ],
    "description": "`useReducer()`, An alternative to `useState`. Accepts a reducer of type `(state, action) => newState`, and returns the current state paired with a `dispatch` method.\n"
  },
  "useMemo": {
    "prefix": ["um", "useMemo", "hooks.useMemo"],
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${3:computeExpensiveValue}($2), [${2:deps}])"
    ],
    "description": "`useMemo()`, Returns a memoized value.\n"
  },
  "useEffect": {
    "prefix": ["ue", "useEffect", "hooks.useEffect"],
    "body": ["useEffect(() => {", "\t$1", "}, [$2])"],
    "description": "`useEffect()`, Accepts a function that contains imperative, possibly effectful code.\n"
  },
  "useContext": {
    "prefix": ["uc", "useContext", "hooks.useContext"],
    "body": ["const ${1:featureContext} = useContext(${2:FeatureContext})"],
    "description": "`useContext()`, Accepts a context object (the value returned from `React.createContext`) and returns the current context value for that context. \n"
  },
  "useCallback": {
    "prefix": ["ucb", "useCallback", "hooks.useCallback"],
    "body": [
      "let ${1:memoizedCallback} = useCallback(() => {",
      "  ${3:fn($2)}",
      "}, [${2:deps}])"
    ],
    "description": "`useCallback()`, Returns a memoized callback.\n"
  }
}
