{
  "newFunction": {
    "prefix": ["fc", "func"],
    "body": ["export default (ctx) => {", "  $0", "}"],
    "description": "Boilerplate syntax for a function"
  },
  "newInputType": {
    "prefix": ["it"],
    "body": [
      "import { InputObjectType, IntType, NonNullType, StringType } from \"#library/graphql/types\";",
      "",
      "export default new NonNullType(",
      "\t\tnew InputObjectType({",
      "\t\t\tname: \"$1Input\",",
      "\t\t\tfields: () => ({",
      "\t\t\t\t//string: { type: new NonNullType(StringType) },",
      "\t\t\t\t//int: { type: new NonNullType(IntType) },",
      "\t\t\t\t$0",
      "\t\t\t}),",
      "\t\t}),",
      ");"
    ],
    "description": "Boilerplate graphql input type"
  },
  "newOutputType": {
    "prefix": ["ot"],
    "body": [
      "import { ObjectType, IntType, NonNullType, StringType } from \"#library/graphql/types\";",
      "",
      "export default new NonNullType(",
      "\t\tnew ObjectType({",
      "\t\t\tname: \"$1Output\",",
      "\t\t\tfields: () => ({",
      "\t\t\t\t//string: { type: new NonNullType(StringType) },",
      "\t\t\t\t//int: { type: new NonNullType(IntType) },",
      "\t\t\t\t$0",
      "\t\t\t}),",
      "\t\t}),",
      ");"
    ],
    "description": "Boilerplate graphql output type"
  },
  "newGraphqlEndpoint": {
    "prefix": ["ge"],
    "body": [
      "import dbConnection from \"#db/connection\";",
      "import { authenticationResolver } from  \"#apps/$1/graphql/resolvers\";",
      "import pipe from \"#library/utils/pipe\";",
      "import { } from \"./actions\";",
      "import { } from \"./queries\";",
      "import { } from \"./serializers\";",
      "import { InputType, OutputType } from \"./types\";",
      "",
      "export default {",
      "\targs: { input: { type: InputType } },",
      "\tresolve: authenticationResolver.createResolver((_root, args, _ctx, _info) => {",
      "\t\tconst { input } = args;",
      "",
      "\t\treturn dbConnection",
      "\t\t\t.transaction((transaction) => {",
      "\t\t\t\treturn pipe({",
      "\t\t\t\t\t$0",
      "\t\t\t\t})",
      "\t\t\t\t\t.bind(\"async\")",
      "\t\t\t\t\t.flow()",
      "\t\t\t\t\t.runAsync();",
      "\t\t\t})",
      "\t}),",
      "\ttype: OutputType,",
      "};"
    ],
    "description": "Boilerplate graphql endpoint"
  },
  "newReactComponent": {
    "prefix": ["rc", "reactcomponent"],
    "body": [
      "import React from \"react\"",
      "import { useStyles, View } from \"@applause-hq/react-web\";",
      "import styles from \"./styles\";",
      "",
      "const $1 = ({ className, ...props }) => {",
      "  const { classes, cx } = useStyles(styles);",
      "  return (",
      "    <View className={cx(classes.root, className)} {...props}>",
      "    </View>",
      "  );",
      "};",
      "",
      "$1.defaultProps = {",
      "  className: \"\"",
      "};",
      "",
      "export default $1;"
    ],
    "description": "Creates a stateless React component as a named function"
  }
}
